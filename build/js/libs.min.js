!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(k,t){"use strict";function m(t){return null!=t&&t===t.window}var e=[],n=Object.getPrototypeOf,a=e.slice,g=e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)},l=e.push,o=e.indexOf,i={},s=i.toString,_=i.hasOwnProperty,r=_.toString,c=r.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},T=k.document,h={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,i){var n,o,s=(i=i||T).createElement("script");if(s.text=t,e)for(n in h)(o=e[n]||e.getAttribute&&e.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[s.call(t)]||"object":typeof t}var u="3.5.1",C=function(t,e){return new C.fn.init(t,e)};function p(t){var e=!!t&&"length"in t&&t.length,i=x(t);return!y(t)&&!m(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}C.fn=C.prototype={jquery:u,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=C.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return C.each(this,t)},map:function(i){return this.pushStack(C.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},C.extend=C.fn.extend=function(){var t,e,i,n,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||y(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(C.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[e],s=o&&!Array.isArray(i)?[]:o||C.isPlainObject(i)?i:{},o=!1,r[e]=C.extend(c,s,n)):void 0!==n&&(r[e]=n));return r},C.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==s.call(t))&&(!(e=n(t))||"function"==typeof(i=_.call(e,"constructor")&&e.constructor)&&r.call(i)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){b(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(p(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(p(Object(t))?C.merge(i,"string"==typeof t?[t]:t):l.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:o.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,o=t.length;n<i;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,i){for(var n=[],o=0,s=t.length,r=!i;o<s;o++)!e(t[o],o)!=r&&n.push(t[o]);return n},map:function(t,e,i){var n,o,s=0,r=[];if(p(t))for(n=t.length;s<n;s++)null!=(o=e(t[s],s,i))&&r.push(o);else for(s in t)null!=(o=e(t[s],s,i))&&r.push(o);return g(r)},guid:1,support:v}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=e[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var d=function(i){function u(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function o(){w()}var t,d,b,s,r,f,p,m,x,l,c,w,k,a,T,g,h,_,v,C="sizzle"+ +new Date,y=i.document,$=0,n=0,S=lt(),E=lt(),D=lt(),N=lt(),A=function(t,e){return t===e&&(c=!0),0},j={}.hasOwnProperty,e=[],F=e.pop,L=e.push,q=e.push,P=e.slice,M=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+O+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+O+"*("+I+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+O+"*\\]",W=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",B=new RegExp(O+"+","g"),U=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),X=new RegExp("^"+O+"*,"+O+"*"),z=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),V=new RegExp(O+"|>"),G=new RegExp(W),Q=new RegExp("^"+I+"$"),K={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,it=/[+~]/,nt=new RegExp("\\\\[\\da-fA-F]{1,6}"+O+"?|\\\\([^\\r\\n\\f])","g"),ot=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=vt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{q.apply(e=P.call(y.childNodes),y.childNodes),e[y.childNodes.length].nodeType}catch(t){q={apply:e.length?function(t,e){L.apply(t,P.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(e,t,i,n){var o,s,r,a,l,c,h,u=t&&t.ownerDocument,p=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==p&&9!==p&&11!==p)return i;if(!n&&(w(t),t=t||k,T)){if(11!==p&&(l=et.exec(e)))if(o=l[1]){if(9===p){if(!(r=t.getElementById(o)))return i;if(r.id===o)return i.push(r),i}else if(u&&(r=u.getElementById(o))&&v(t,r)&&r.id===o)return i.push(r),i}else{if(l[2])return q.apply(i,t.getElementsByTagName(e)),i;if((o=l[3])&&d.getElementsByClassName&&t.getElementsByClassName)return q.apply(i,t.getElementsByClassName(o)),i}if(d.qsa&&!N[e+" "]&&(!g||!g.test(e))&&(1!==p||"object"!==t.nodeName.toLowerCase())){if(h=e,u=t,1===p&&(V.test(e)||z.test(e))){for((u=it.test(e)&&mt(t.parentNode)||t)===t&&d.scope||((a=t.getAttribute("id"))?a=a.replace(ot,st):t.setAttribute("id",a=C)),s=(c=f(e)).length;s--;)c[s]=(a?"#"+a:":scope")+" "+_t(c[s]);h=c.join(",")}try{return q.apply(i,u.querySelectorAll(h)),i}catch(t){N(e,!0)}finally{a===C&&t.removeAttribute("id")}}}return m(e.replace(U,"$1"),t,i,n)}function lt(){var i=[];function n(t,e){return i.push(t+" ")>b.cacheLength&&delete n[i.shift()],n[t+" "]=e}return n}function ct(t){return t[C]=!0,t}function ht(t){var e=k.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var i=t.split("|"),n=i.length;n--;)b.attrHandle[i[n]]=e}function pt(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function dt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ft(r){return ct(function(s){return s=+s,ct(function(t,e){for(var i,n=r([],t.length,s),o=n.length;o--;)t[i=n[o]]&&(t[i]=!(e[i]=t[i]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in d=at.support={},r=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!Y.test(e||i&&i.nodeName||"HTML")},w=at.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:y;return n!=k&&9===n.nodeType&&n.documentElement&&(a=(k=n).documentElement,T=!r(k),y!=k&&(i=k.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",o,!1):i.attachEvent&&i.attachEvent("onunload",o)),d.scope=ht(function(t){return a.appendChild(t).appendChild(k.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),d.attributes=ht(function(t){return t.className="i",!t.getAttribute("className")}),d.getElementsByTagName=ht(function(t){return t.appendChild(k.createComment("")),!t.getElementsByTagName("*").length}),d.getElementsByClassName=tt.test(k.getElementsByClassName),d.getById=ht(function(t){return a.appendChild(t).id=C,!k.getElementsByName||!k.getElementsByName(C).length}),d.getById?(b.filter.ID=function(t){var e=t.replace(nt,u);return function(t){return t.getAttribute("id")===e}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var i=e.getElementById(t);return i?[i]:[]}}):(b.filter.ID=function(t){var i=t.replace(nt,u);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===i}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var i,n,o,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(o=e.getElementsByName(t),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),b.find.TAG=d.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):d.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],o=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;i=s[o++];)1===i.nodeType&&n.push(i);return n},b.find.CLASS=d.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},h=[],g=[],(d.qsa=tt.test(k.querySelectorAll))&&(ht(function(t){var e;a.appendChild(t).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+O+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+O+"*(?:value|"+H+")"),t.querySelectorAll("[id~="+C+"-]").length||g.push("~="),(e=k.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+O+"*name"+O+"*="+O+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+C+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ht(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=k.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+O+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(d.matchesSelector=tt.test(_=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ht(function(t){d.disconnectedMatch=_.call(t,"*"),_.call(t,"[s!='']:x"),h.push("!=",W)}),g=g.length&&new RegExp(g.join("|")),h=h.length&&new RegExp(h.join("|")),e=tt.test(a.compareDocumentPosition),v=e||tt.test(a.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return c=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!d.sortDetached&&e.compareDocumentPosition(t)===i?t==k||t.ownerDocument==y&&v(y,t)?-1:e==k||e.ownerDocument==y&&v(y,e)?1:l?M(l,t)-M(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,n=0,o=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!o||!s)return t==k?-1:e==k?1:o?-1:s?1:l?M(l,t)-M(l,e):0;if(o===s)return pt(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?pt(r[n],a[n]):r[n]==y?-1:a[n]==y?1:0}),k},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(w(t),d.matchesSelector&&T&&!N[e+" "]&&(!h||!h.test(e))&&(!g||!g.test(e)))try{var i=_.call(t,e);if(i||d.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){N(e,!0)}return 0<at(e,k,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!=k&&w(t),v(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=k&&w(t);var i=b.attrHandle[e.toLowerCase()],n=i&&j.call(b.attrHandle,e.toLowerCase())?i(t,e,!T):void 0;return void 0!==n?n:d.attributes||!T?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},at.escape=function(t){return(t+"").replace(ot,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],n=0,o=0;if(c=!d.detectDuplicates,l=!d.sortStable&&t.slice(0),t.sort(A),c){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)t.splice(i[n],1)}return l=null,t},s=at.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},(b=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(nt,u),t[3]=(t[3]||t[4]||t[5]||"").replace(nt,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&G.test(i)&&(e=f(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(nt,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=S[t+" "];return e||(e=new RegExp("(^|"+O+")"+t+"("+O+"|$)"))&&S(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(i,n,o){return function(t){var e=at.attr(t,i);return null==e?"!="===n:!n||(e+="","="===n?e===o:"!="===n?e!==o:"^="===n?o&&0===e.indexOf(o):"*="===n?o&&-1<e.indexOf(o):"$="===n?o&&e.slice(-o.length)===o:"~="===n?-1<(" "+e.replace(B," ")+" ").indexOf(o):"|="===n&&(e===o||e.slice(0,o.length+1)===o+"-"))}},CHILD:function(f,t,e,m,g){var _="nth"!==f.slice(0,3),v="last"!==f.slice(-4),y="of-type"===t;return 1===m&&0===g?function(t){return!!t.parentNode}:function(t,e,i){var n,o,s,r,a,l,c=_!=v?"nextSibling":"previousSibling",h=t.parentNode,u=y&&t.nodeName.toLowerCase(),p=!i&&!y,d=!1;if(h){if(_){for(;c;){for(r=t;r=r[c];)if(y?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[v?h.firstChild:h.lastChild],v&&p){for(d=(a=(n=(o=(s=(r=h)[C]||(r[C]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===$&&n[1])&&n[2],r=a&&h.childNodes[a];r=++a&&r&&r[c]||(d=a=0)||l.pop();)if(1===r.nodeType&&++d&&r===t){o[f]=[$,a,d];break}}else if(p&&(d=a=(n=(o=(s=(r=t)[C]||(r[C]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===$&&n[1]),!1===d)for(;(r=++a&&r&&r[c]||(d=a=0)||l.pop())&&((y?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++d||(p&&((o=(s=r[C]||(r[C]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]=[$,d]),r!==t)););return(d-=g)===m||d%m==0&&0<=d/m}}},PSEUDO:function(t,s){var e,r=b.pseudos[t]||b.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[C]?r(s):1<r.length?(e=[t,t,"",s],b.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var i,n=r(t,s),o=n.length;o--;)t[i=M(t,n[o])]=!(e[i]=n[o])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var n=[],o=[],a=p(t.replace(U,"$1"));return a[C]?ct(function(t,e,i,n){for(var o,s=a(t,null,n,[]),r=t.length;r--;)(o=s[r])&&(t[r]=!(e[r]=o))}):function(t,e,i){return n[0]=t,a(n,null,i,o),n[0]=null,!o.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(nt,u),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:ct(function(i){return Q.test(i||"")||at.error("unsupported lang: "+i),i=i.replace(nt,u).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=i.location&&i.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===a},focus:function(t){return t===k.activeElement&&(!k.hasFocus||k.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:dt(!1),disabled:dt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!b.pseudos.empty(t)},header:function(t){return Z.test(t.nodeName)},input:function(t){return J.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ft(function(){return[0]}),last:ft(function(t,e){return[e-1]}),eq:ft(function(t,e,i){return[i<0?i+e:i]}),even:ft(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:ft(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:ft(function(t,e,i){for(var n=i<0?i+e:e<i?e:i;0<=--n;)t.push(n);return t}),gt:ft(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[t]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in{submit:!0,reset:!0})b.pseudos[t]=function(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}(t);function gt(){}function _t(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function vt(a,t,e){var l=t.dir,c=t.next,h=c||l,u=e&&"parentNode"===h,p=n++;return t.first?function(t,e,i){for(;t=t[l];)if(1===t.nodeType||u)return a(t,e,i);return!1}:function(t,e,i){var n,o,s,r=[$,p];if(i){for(;t=t[l];)if((1===t.nodeType||u)&&a(t,e,i))return!0}else for(;t=t[l];)if(1===t.nodeType||u)if(o=(s=t[C]||(t[C]={}))[t.uniqueID]||(s[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((n=o[h])&&n[0]===$&&n[1]===p)return r[2]=n[2];if((o[h]=r)[2]=a(t,e,i))return!0}return!1}}function yt(o){return 1<o.length?function(t,e,i){for(var n=o.length;n--;)if(!o[n](t,e,i))return!1;return!0}:o[0]}function bt(t,e,i,n,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,o)||(r.push(s),c&&e.push(a)));return r}function xt(d,f,m,g,_,t){return g&&!g[C]&&(g=xt(g)),_&&!_[C]&&(_=xt(_,t)),ct(function(t,e,i,n){var o,s,r,a=[],l=[],c=e.length,h=t||function(t,e,i){for(var n=0,o=e.length;n<o;n++)at(t,e[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!d||!t&&f?h:bt(h,a,d,i,n),p=m?_||(t?d:c||g)?[]:e:u;if(m&&m(u,p,i,n),g)for(o=bt(p,l),g(o,[],i,n),s=o.length;s--;)(r=o[s])&&(p[l[s]]=!(u[l[s]]=r));if(t){if(_||d){if(_){for(o=[],s=p.length;s--;)(r=p[s])&&o.push(u[s]=r);_(null,p=[],o,n)}for(s=p.length;s--;)(r=p[s])&&-1<(o=_?M(t,r):a[s])&&(t[o]=!(e[o]=r))}}else p=bt(p===e?p.splice(c,p.length):p),_?_(null,e,p,n):q.apply(e,p)})}function wt(g,_){function t(t,e,i,n,o){var s,r,a,l=0,c="0",h=t&&[],u=[],p=x,d=t||y&&b.find.TAG("*",o),f=$+=null==p?1:Math.random()||.1,m=d.length;for(o&&(x=e==k||e||o);c!==m&&null!=(s=d[c]);c++){if(y&&s){for(r=0,e||s.ownerDocument==k||(w(s),i=!T);a=g[r++];)if(a(s,e||k,i)){n.push(s);break}o&&($=f)}v&&((s=!a&&s)&&l--,t&&h.push(s))}if(l+=c,v&&c!==l){for(r=0;a=_[r++];)a(h,u,e,i);if(t){if(0<l)for(;c--;)h[c]||u[c]||(u[c]=F.call(n));u=bt(u)}q.apply(n,u),o&&!t&&0<u.length&&1<l+_.length&&at.uniqueSort(n)}return o&&($=f,x=p),h}var v=0<_.length,y=0<g.length;return v?ct(t):t}return gt.prototype=b.filters=b.pseudos,b.setFilters=new gt,f=at.tokenize=function(t,e){var i,n,o,s,r,a,l,c=E[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=b.preFilter;r;){for(s in i&&!(n=X.exec(r))||(n&&(r=r.slice(n[0].length)||r),a.push(o=[])),i=!1,(n=z.exec(r))&&(i=n.shift(),o.push({value:i,type:n[0].replace(U," ")}),r=r.slice(i.length)),b.filter)!(n=K[s].exec(r))||l[s]&&!(n=l[s](n))||(i=n.shift(),o.push({value:i,type:s,matches:n}),r=r.slice(i.length));if(!i)break}return e?r.length:r?at.error(t):E(t,a).slice(0)},p=at.compile=function(t,e){var i,n=[],o=[],s=D[t+" "];if(!s){for(i=(e=e||f(t)).length;i--;)(s=function t(e){for(var o,i,n,s=e.length,r=b.relative[e[0].type],a=r||b.relative[" "],l=r?1:0,c=vt(function(t){return t===o},a,!0),h=vt(function(t){return-1<M(o,t)},a,!0),u=[function(t,e,i){var n=!r&&(i||e!==x)||((o=e).nodeType?c:h)(t,e,i);return o=null,n}];l<s;l++)if(i=b.relative[e[l].type])u=[vt(yt(u),i)];else{if((i=b.filter[e[l].type].apply(null,e[l].matches))[C]){for(n=++l;n<s&&!b.relative[e[n].type];n++);return xt(1<l&&yt(u),1<l&&_t(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(U,"$1"),i,l<n&&t(e.slice(l,n)),n<s&&t(e=e.slice(n)),n<s&&_t(e))}u.push(i)}return yt(u)}(e[i]))[C]?n.push(s):o.push(s);(s=D(t,wt(o,n))).selector=t}return s},m=at.select=function(t,e,i,n){var o,s,r,a,l,c="function"==typeof t&&t,h=!n&&f(t=c.selector||t);if(i=i||[],1===h.length){if(2<(s=h[0]=h[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&T&&b.relative[s[1].type]){if(!(e=(b.find.ID(r.matches[0].replace(nt,u),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=K.needsContext.test(t)?0:s.length;o--&&(r=s[o],!b.relative[a=r.type]);)if((l=b.find[a])&&(n=l(r.matches[0].replace(nt,u),it.test(s[0].type)&&mt(e.parentNode)||e))){if(s.splice(o,1),!(t=n.length&&_t(s)))return q.apply(i,n),i;break}}return(c||p(t,h))(n,e,!T,i,!e||it.test(t)&&mt(e.parentNode)||e),i},d.sortStable=C.split("").sort(A).join("")===C,d.detectDuplicates=!!c,w(),d.sortDetached=ht(function(t){return 1&t.compareDocumentPosition(k.createElement("fieldset"))}),ht(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),d.attributes&&ht(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ht(function(t){return null==t.getAttribute("disabled")})||ut(H,function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),at}(k);C.find=d,C.expr=d.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=d.uniqueSort,C.text=d.getText,C.isXMLDoc=d.isXML,C.contains=d.contains,C.escapeSelector=d.escape;function f(t,e,i){for(var n=[],o=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&C(t).is(i))break;n.push(t)}return n}function w(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var $=C.expr.match.needsContext;function S(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(t,i,n){return y(i)?C.grep(t,function(t,e){return!!i.call(t,e,t)!==n}):i.nodeType?C.grep(t,function(t){return t===i!==n}):"string"!=typeof i?C.grep(t,function(t){return-1<o.call(i,t)!==n}):C.filter(i,t,n)}C.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?C.find.matchesSelector(n,t)?[n]:[]:C.find.matches(t,C.grep(e,function(t){return 1===t.nodeType}))},C.fn.extend({find:function(t){var e,i,n=this.length,o=this;if("string"!=typeof t)return this.pushStack(C(t).filter(function(){for(e=0;e<n;e++)if(C.contains(o[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)C.find(t,o[e],i);return 1<n?C.uniqueSort(i):i},filter:function(t){return this.pushStack(D(this,t||[],!1))},not:function(t){return this.pushStack(D(this,t||[],!0))},is:function(t){return!!D(this,"string"==typeof t&&$.test(t)?C(t):t||[],!1).length}});var N,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(t,e,i){var n,o;if(!t)return this;if(i=i||N,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==i.ready?i.ready(t):t(C):C.makeArray(t,this);if(!(n="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:A.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof C?e[0]:e,C.merge(this,C.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),E.test(n[1])&&C.isPlainObject(e))for(n in e)y(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(o=T.getElementById(n[2]))&&(this[0]=o,this.length=1),this}).prototype=C.fn,N=C(T);var j=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}C.fn.extend({has:function(t){var e=C(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(C.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,o=this.length,s=[],r="string"!=typeof t&&C(t);if(!$.test(t))for(;n<o;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&C.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(1<s.length?C.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?o.call(C(t),this[0]):o.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),C.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return f(t,"parentNode")},parentsUntil:function(t,e,i){return f(t,"parentNode",i)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return f(t,"nextSibling")},prevAll:function(t){return f(t,"previousSibling")},nextUntil:function(t,e,i){return f(t,"nextSibling",i)},prevUntil:function(t,e,i){return f(t,"previousSibling",i)},siblings:function(t){return w((t.parentNode||{}).firstChild,t)},children:function(t){return w(t.firstChild)},contents:function(t){return null!=t.contentDocument&&n(t.contentDocument)?t.contentDocument:(S(t,"template")&&(t=t.content||t),C.merge([],t.childNodes))}},function(n,o){C.fn[n]=function(t,e){var i=C.map(this,o,t);return"Until"!==n.slice(-5)&&(e=t),e&&"string"==typeof e&&(i=C.filter(e,i)),1<this.length&&(F[n]||C.uniqueSort(i),j.test(n)&&i.reverse()),this.pushStack(i)}});var q=/[^\x20\t\r\n\f]+/g;function P(t){return t}function M(t){throw t}function H(t,e,i,n){var o;try{t&&y(o=t.promise)?o.call(t).done(e).fail(i):t&&y(o=t.then)?o.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}C.Callbacks=function(n){var t,i;n="string"==typeof n?(t=n,i={},C.each(t.match(q)||[],function(t,e){i[e]=!0}),i):C.extend({},n);function o(){for(a=a||n.once,r=s=!0;c.length;h=-1)for(e=c.shift();++h<l.length;)!1===l[h].apply(e[0],e[1])&&n.stopOnFalse&&(h=l.length,e=!1);n.memory||(e=!1),s=!1,a&&(l=e?[]:"")}var s,e,r,a,l=[],c=[],h=-1,u={add:function(){return l&&(e&&!s&&(h=l.length-1,c.push(e)),function i(t){C.each(t,function(t,e){y(e)?n.unique&&u.has(e)||l.push(e):e&&e.length&&"string"!==x(e)&&i(e)})}(arguments),e&&!s&&o()),this},remove:function(){return C.each(arguments,function(t,e){for(var i;-1<(i=C.inArray(e,l,i));)l.splice(i,1),i<=h&&h--}),this},has:function(t){return t?-1<C.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||s||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),s||o()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},C.extend({Deferred:function(t){var s=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var o=arguments;return C.Deferred(function(n){C.each(s,function(t,e){var i=y(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=i&&i.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[e[0]+"With"](this,i?[t]:arguments)})}),o=null}).promise()},then:function(e,i,n){var l=0;function c(o,s,r,a){return function(){function t(){var t,e;if(!(o<l)){if((t=r.apply(i,n))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,y(e)?a?e.call(t,c(l,s,P,a),c(l,s,M,a)):(l++,e.call(t,c(l,s,P,a),c(l,s,M,a),c(l,s,P,s.notifyWith))):(r!==P&&(i=void 0,n=[t]),(a||s.resolveWith)(i,n))}}var i=this,n=arguments,e=a?t:function(){try{t()}catch(t){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(r!==M&&(i=void 0,n=[t]),s.rejectWith(i,n))}};o?e():(C.Deferred.getStackHook&&(e.stackTrace=C.Deferred.getStackHook()),k.setTimeout(e))}}return C.Deferred(function(t){s[0][3].add(c(0,t,y(n)?n:P,t.notifyWith)),s[1][3].add(c(0,t,y(e)?e:P)),s[2][3].add(c(0,t,y(i)?i:M))}).promise()},promise:function(t){return null!=t?C.extend(t,r):r}},a={};return C.each(s,function(t,e){var i=e[2],n=e[5];r[e[1]]=i.add,n&&i.add(function(){o=n},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),i.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=i.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--i||r.resolveWith(o,s)}}var i=arguments.length,n=i,o=Array(n),s=a.call(arguments),r=C.Deferred();if(i<=1&&(H(t,r.done(e(n)).resolve,r.reject,!i),"pending"===r.state()||y(s[n]&&s[n].then)))return r.then();for(;n--;)H(s[n],e(n),r.reject);return r.promise()}});var O=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(t,e){k.console&&k.console.warn&&t&&O.test(t.name)&&k.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},C.readyException=function(t){k.setTimeout(function(){throw t})};var I=C.Deferred();function R(){T.removeEventListener("DOMContentLoaded",R),k.removeEventListener("load",R),C.ready()}C.fn.ready=function(t){return I.then(t).catch(function(t){C.readyException(t)}),this},C.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--C.readyWait:C.isReady)||(C.isReady=!0)!==t&&0<--C.readyWait||I.resolveWith(T,[C])}}),C.ready.then=I.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?k.setTimeout(C.ready):(T.addEventListener("DOMContentLoaded",R),k.addEventListener("load",R));var W=function(t,e,i,n,o,s,r){var a=0,l=t.length,c=null==i;if("object"===x(i))for(a in o=!0,i)W(t,e,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,y(n)||(r=!0),c&&(e=r?(e.call(t,n),null):(c=e,function(t,e,i){return c.call(C(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return o?t:c?e.call(t):l?e(t[0],i):s},B=/^-ms-/,U=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function z(t){return t.replace(B,"ms-").replace(U,X)}function V(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function G(){this.expando=C.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},V(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,o=this.cache(t);if("string"==typeof e)o[z(e)]=i;else for(n in e)o[z(n)]=e[n];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][z(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(z):(e=z(e))in n?[e]:e.match(q)||[]).length;for(;i--;)delete n[e[i]]}void 0!==e&&!C.isEmptyObject(n)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var Q=new G,K=new G,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(t,e,i){var n,o;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i="true"===(o=i)||"false"!==o&&("null"===o?null:o===+o+""?+o:Y.test(o)?JSON.parse(o):o)}catch(t){}K.set(t,e,i)}else i=void 0;return i}C.extend({hasData:function(t){return K.hasData(t)||Q.hasData(t)},data:function(t,e,i){return K.access(t,e,i)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,i){return Q.access(t,e,i)},_removeData:function(t,e){Q.remove(t,e)}}),C.fn.extend({data:function(i,t){var e,n,o,s=this[0],r=s&&s.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):W(this,function(t){var e;return s&&void 0===t?void 0!==(e=K.get(s,i))||void 0!==(e=Z(s,i))?e:void 0:void this.each(function(){K.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=K.get(s),1===s.nodeType&&!Q.get(s,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(n=r[e].name).indexOf("data-")&&(n=z(n.slice(5)),Z(s,n,o[n]));Q.set(s,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),C.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=Q.get(t,e),i&&(!n||Array.isArray(i)?n=Q.access(t,e,C.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=C.queue(t,e),n=i.length,o=i.shift(),s=C._queueHooks(t,e);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===e&&i.unshift("inprogress"),delete s.stop,o.call(t,function(){C.dequeue(t,e)},s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Q.get(t,i)||Q.access(t,i,{empty:C.Callbacks("once memory").add(function(){Q.remove(t,[e+"queue",i])})})}}),C.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?C.queue(this[0],e):void 0===i?this:this.each(function(){var t=C.queue(this,e,i);C._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&C.dequeue(this,e)})},dequeue:function(t){return this.each(function(){C.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--o||s.resolveWith(r,[r])}var n,o=1,s=C.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Q.get(r[a],t+"queueHooks"))&&n.empty&&(o++,n.empty.add(i));return i(),s.promise(e)}});var tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,et=new RegExp("^(?:([+-])=|)("+tt+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],nt=T.documentElement,ot=function(t){return C.contains(t.ownerDocument,t)},st={composed:!0};nt.getRootNode&&(ot=function(t){return C.contains(t.ownerDocument,t)||t.getRootNode(st)===t.ownerDocument});var rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&ot(t)&&"none"===C.css(t,"display")};function at(t,e,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return C.css(t,e,"")},l=a(),c=i&&i[3]||(C.cssNumber[e]?"":"px"),h=t.nodeType&&(C.cssNumber[e]||"px"!==c&&+l)&&et.exec(C.css(t,e));if(h&&h[3]!==c){for(l/=2,c=c||h[3],h=+l||1;r--;)C.style(t,e,h+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),h/=s;h*=2,C.style(t,e,h+c),i=i||[]}return i&&(h=+h||+l||0,o=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=h,n.end=o)),o}var lt={};function ct(t,e){for(var i,n,o,s,r,a,l,c=[],h=0,u=t.length;h<u;h++)(n=t[h]).style&&(i=n.style.display,e?("none"===i&&(c[h]=Q.get(n,"display")||null,c[h]||(n.style.display="")),""===n.style.display&&rt(n)&&(c[h]=(l=a=r=s=void 0,r=(o=n).ownerDocument,a=o.nodeName,(l=lt[a])||(s=r.body.appendChild(r.createElement(a)),l=C.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),lt[a]=l)))):"none"!==i&&(c[h]="none",Q.set(n,"display",i)));for(h=0;h<u;h++)null!=c[h]&&(t[h].style.display=c[h]);return t}C.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?C(this).show():C(this).hide()})}});var ht,ut,pt=/^(?:checkbox|radio)$/i,dt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i;ht=T.createDocumentFragment().appendChild(T.createElement("div")),(ut=T.createElement("input")).setAttribute("type","radio"),ut.setAttribute("checked","checked"),ut.setAttribute("name","t"),ht.appendChild(ut),v.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",v.option=!!ht.lastChild;var mt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&S(t,e)?C.merge([t],i):i}function _t(t,e){for(var i=0,n=t.length;i<n;i++)Q.set(t[i],"globalEval",!e||Q.get(e[i],"globalEval"))}mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td,v.option||(mt.optgroup=mt.option=[1,"<select multiple='multiple'>","</select>"]);var vt=/<|&#?\w+;/;function yt(t,e,i,n,o){for(var s,r,a,l,c,h,u=e.createDocumentFragment(),p=[],d=0,f=t.length;d<f;d++)if((s=t[d])||0===s)if("object"===x(s))C.merge(p,s.nodeType?[s]:s);else if(vt.test(s)){for(r=r||u.appendChild(e.createElement("div")),a=(dt.exec(s)||["",""])[1].toLowerCase(),l=mt[a]||mt._default,r.innerHTML=l[1]+C.htmlPrefilter(s)+l[2],h=l[0];h--;)r=r.lastChild;C.merge(p,r.childNodes),(r=u.firstChild).textContent=""}else p.push(e.createTextNode(s));for(u.textContent="",d=0;s=p[d++];)if(n&&-1<C.inArray(s,n))o&&o.push(s);else if(c=ot(s),r=gt(u.appendChild(s),"script"),c&&_t(r),i)for(h=0;s=r[h++];)ft.test(s.type||"")&&i.push(s);return u}var bt=/^key/,xt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,wt=/^([^.]*)(?:\.(.+)|)/;function kt(){return!0}function Tt(){return!1}function Ct(t,e){return t===function(){try{return T.activeElement}catch(t){}}()==("focus"===e)}function $t(t,e,i,n,o,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)$t(t,a,i,n,e[a],s);return t}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=Tt;else if(!o)return t;return 1===s&&(r=o,(o=function(t){return C().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=C.guid++)),t.each(function(){C.event.add(this,e,o,n,i)})}function St(t,o,s){s?(Q.set(t,o,!1),C.event.add(t,o,{namespace:!1,handler:function(t){var e,i,n=Q.get(this,o);if(1&t.isTrigger&&this[o]){if(n.length)(C.event.special[o]||{}).delegateType&&t.stopPropagation();else if(n=a.call(arguments),Q.set(this,o,n),e=s(this,o),this[o](),n!==(i=Q.get(this,o))||e?Q.set(this,o,!1):i={},n!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else n.length&&(Q.set(this,o,{value:C.event.trigger(C.extend(n[0],C.Event.prototype),n.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===Q.get(t,o)&&C.event.add(t,o,kt)}C.event={global:{},add:function(e,t,i,n,o){var s,r,a,l,c,h,u,p,d,f,m,g=Q.get(e);if(V(e))for(i.handler&&(i=(s=i).handler,o=s.selector),o&&C.find.matchesSelector(nt,o),i.guid||(i.guid=C.guid++),(l=g.events)||(l=g.events=Object.create(null)),(r=g.handle)||(r=g.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(q)||[""]).length;c--;)d=m=(a=wt.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),d&&(u=C.event.special[d]||{},d=(o?u.delegateType:u.bindType)||d,u=C.event.special[d]||{},h=C.extend({type:d,origType:m,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:f.join(".")},s),(p=l[d])||((p=l[d]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,n,f,r)||e.addEventListener&&e.addEventListener(d,r)),u.add&&(u.add.call(e,h),h.handler.guid||(h.handler.guid=i.guid)),o?p.splice(p.delegateCount++,0,h):p.push(h),C.event.global[d]=!0)},remove:function(t,e,i,n,o){var s,r,a,l,c,h,u,p,d,f,m,g=Q.hasData(t)&&Q.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(q)||[""]).length;c--;)if(d=m=(a=wt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),d){for(u=C.event.special[d]||{},p=l[d=(n?u.delegateType:u.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=p.length;s--;)h=p[s],!o&&m!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(p.splice(s,1),h.selector&&p.delegateCount--,u.remove&&u.remove.call(t,h));r&&!p.length&&(u.teardown&&!1!==u.teardown.call(t,f,g.handle)||C.removeEvent(t,d,g.handle),delete l[d])}else for(d in l)C.event.remove(t,d+e[c],i,n,!0);C.isEmptyObject(l)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,i,n,o,s,r,a=new Array(arguments.length),l=C.event.fix(t),c=(Q.get(this,"events")||Object.create(null))[l.type]||[],h=C.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,l)){for(r=C.event.handlers.call(this,l,c),e=0;(o=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(n=((C.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=e[i]).selector+" "]&&(r[o]=n.needsContext?-1<C(o,this).index(c):C.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[C.expando]?t:new C.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return pt.test(e.type)&&e.click&&S(e,"input")&&St(e,"click",kt),!1},trigger:function(t){var e=this||t;return pt.test(e.type)&&e.click&&S(e,"input")&&St(e,"click"),!0},_default:function(t){var e=t.target;return pt.test(e.type)&&e.click&&S(e,"input")&&Q.get(e,"click")||S(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},C.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},C.Event=function(t,e){if(!(this instanceof C.Event))return new C.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?kt:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&C.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=kt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=kt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=kt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&bt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&xt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(t,e){C.event.special[t]={setup:function(){return St(this,t,Ct),!1},trigger:function(){return St(this,t),!0},delegateType:e}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){C.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,i=t.relatedTarget,n=t.handleObj;return i&&(i===this||C.contains(this,i))||(t.type=n.origType,e=n.handler.apply(this,arguments),t.type=o),e}}}),C.fn.extend({on:function(t,e,i,n){return $t(this,t,e,i,n)},one:function(t,e,i,n){return $t(this,t,e,i,n,1)},off:function(t,e,i){var n,o;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,C(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Tt),this.each(function(){C.event.remove(this,t,i,e)});for(o in t)this.off(o,e,t[o]);return this}});var Et=/<script|<style|<link/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function At(t,e){return S(t,"table")&&S(11!==e.nodeType?e:e.firstChild,"tr")&&C(t).children("tbody")[0]||t}function jt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ft(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Lt(t,e){var i,n,o,s,r,a;if(1===e.nodeType){if(Q.hasData(t)&&(a=Q.get(t).events))for(o in Q.remove(e,"handle events"),a)for(i=0,n=a[o].length;i<n;i++)C.event.add(e,o,a[o][i]);K.hasData(t)&&(s=K.access(t),r=C.extend({},s),K.set(e,r))}}function qt(i,n,o,s){n=g(n);var t,e,r,a,l,c,h=0,u=i.length,p=u-1,d=n[0],f=y(d);if(f||1<u&&"string"==typeof d&&!v.checkClone&&Dt.test(d))return i.each(function(t){var e=i.eq(t);f&&(n[0]=d.call(this,t,e.html())),qt(e,n,o,s)});if(u&&(e=(t=yt(n,i[0].ownerDocument,!1,i,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=C.map(gt(t,"script"),jt)).length;h<u;h++)l=t,h!==p&&(l=C.clone(l,!0,!0),a&&C.merge(r,gt(l,"script"))),o.call(i[h],l,h);if(a)for(c=r[r.length-1].ownerDocument,C.map(r,Ft),h=0;h<a;h++)l=r[h],ft.test(l.type||"")&&!Q.access(l,"globalEval")&&C.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):b(l.textContent.replace(Nt,""),l,c))}return i}function Pt(t,e,i){for(var n,o=e?C.filter(e,t):t,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||C.cleanData(gt(n)),n.parentNode&&(i&&ot(n)&&_t(gt(n,"script")),n.parentNode.removeChild(n));return t}C.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,o,s,r,a,l,c,h=t.cloneNode(!0),u=ot(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||C.isXMLDoc(t)))for(r=gt(h),n=0,o=(s=gt(t)).length;n<o;n++)a=s[n],l=r[n],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&pt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||gt(t),r=r||gt(h),n=0,o=s.length;n<o;n++)Lt(s[n],r[n]);else Lt(t,h);return 0<(r=gt(h,"script")).length&&_t(r,!u&&gt(t,"script")),h},cleanData:function(t){for(var e,i,n,o=C.event.special,s=0;void 0!==(i=t[s]);s++)if(V(i)){if(e=i[Q.expando]){if(e.events)for(n in e.events)o[n]?C.event.remove(i,n):C.removeEvent(i,n,e.handle);i[Q.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),C.fn.extend({detach:function(t){return Pt(this,t,!0)},remove:function(t){return Pt(this,t)},text:function(t){return W(this,function(t){return void 0===t?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return qt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||At(this,t).appendChild(t)})},prepend:function(){return qt(this,arguments,function(t){var e;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(e=At(this,t)).insertBefore(t,e.firstChild)})},before:function(){return qt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return qt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(C.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return C.clone(this,t,e)})},html:function(t){return W(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Et.test(t)&&!mt[(dt.exec(t)||["",""])[1].toLowerCase()]){t=C.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(C.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return qt(this,arguments,function(t){var e=this.parentNode;C.inArray(this,i)<0&&(C.cleanData(gt(this)),e&&e.replaceChild(t,this))},i)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){C.fn[t]=function(t){for(var e,i=[],n=C(t),o=n.length-1,s=0;s<=o;s++)e=s===o?this:this.clone(!0),C(n[s])[r](e),l.apply(i,e.get());return this.pushStack(i)}});function Mt(t,e,i){var n,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in n=i.call(t),e)t.style[o]=s[o];return n}var Ht,Ot,It,Rt,Wt,Bt,Ut,Xt,zt=new RegExp("^("+tt+")(?!px)[a-z%]+$","i"),Vt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=k),e.getComputedStyle(t)},Gt=new RegExp(it.join("|"),"i");function Qt(){var t;Xt&&(Ut.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",nt.appendChild(Ut).appendChild(Xt),t=k.getComputedStyle(Xt),Ht="1%"!==t.top,Bt=12===Kt(t.marginLeft),Xt.style.right="60%",Rt=36===Kt(t.right),Ot=36===Kt(t.width),Xt.style.position="absolute",It=12===Kt(Xt.offsetWidth/3),nt.removeChild(Ut),Xt=null)}function Kt(t){return Math.round(parseFloat(t))}function Yt(t,e,i){var n,o,s,r,a=t.style;return(i=i||Vt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||ot(t)||(r=C.style(t,e)),!v.pixelBoxStyles()&&zt.test(r)&&Gt.test(e)&&(n=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=o,a.maxWidth=s)),void 0!==r?r+"":r}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Ut=T.createElement("div"),(Xt=T.createElement("div")).style&&(Xt.style.backgroundClip="content-box",Xt.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Xt.style.backgroundClip,C.extend(v,{boxSizingReliable:function(){return Qt(),Ot},pixelBoxStyles:function(){return Qt(),Rt},pixelPosition:function(){return Qt(),Ht},reliableMarginLeft:function(){return Qt(),Bt},scrollboxSize:function(){return Qt(),It},reliableTrDimensions:function(){var t,e,i,n;return null==Wt&&(t=T.createElement("table"),e=T.createElement("tr"),i=T.createElement("div"),t.style.cssText="position:absolute;left:-11111px",e.style.height="1px",i.style.height="9px",nt.appendChild(t).appendChild(e).appendChild(i),n=k.getComputedStyle(e),Wt=3<parseInt(n.height),nt.removeChild(t)),Wt}}));var Zt=["Webkit","Moz","ms"],te=T.createElement("div").style,ee={};function ie(t){var e=C.cssProps[t]||ee[t];return e||(t in te?t:ee[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Zt.length;i--;)if((t=Zt[i]+e)in te)return t}(t)||t)}var ne=/^(none|table(?!-c[ea]).+)/,oe=/^--/,se={position:"absolute",visibility:"hidden",display:"block"},re={letterSpacing:"0",fontWeight:"400"};function ae(t,e,i){var n=et.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function le(t,e,i,n,o,s){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=C.css(t,i+it[r],!0,o)),n?("content"===i&&(l-=C.css(t,"padding"+it[r],!0,o)),"margin"!==i&&(l-=C.css(t,"border"+it[r]+"Width",!0,o))):(l+=C.css(t,"padding"+it[r],!0,o),"padding"!==i?l+=C.css(t,"border"+it[r]+"Width",!0,o):a+=C.css(t,"border"+it[r]+"Width",!0,o));return!n&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function ce(t,e,i){var n=Vt(t),o=(!v.boxSizingReliable()||i)&&"border-box"===C.css(t,"boxSizing",!1,n),s=o,r=Yt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(r)){if(!i)return r;r="auto"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&S(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===C.css(t,"display",!1,n))&&t.getClientRects().length&&(o="border-box"===C.css(t,"boxSizing",!1,n),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+le(t,e,i||(o?"border":"content"),s,n,r)+"px"}function he(t,e,i,n,o){return new he.prototype.init(t,e,i,n,o)}C.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Yt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=z(e),l=oe.test(e),c=t.style;if(l||(e=ie(a)),r=C.cssHooks[e]||C.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(t,!1,n))?o:c[e];"string"===(s=typeof i)&&(o=et.exec(i))&&o[1]&&(i=at(t,e,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(C.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var o,s,r,a=z(e);return oe.test(e)||(e=ie(a)),(r=C.cssHooks[e]||C.cssHooks[a])&&"get"in r&&(o=r.get(t,!0,i)),void 0===o&&(o=Yt(t,e,n)),"normal"===o&&e in re&&(o=re[e]),""===i||i?(s=parseFloat(o),!0===i||isFinite(s)?s||0:o):o}}),C.each(["height","width"],function(t,l){C.cssHooks[l]={get:function(t,e,i){if(e)return!ne.test(C.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ce(t,l,i):Mt(t,se,function(){return ce(t,l,i)})},set:function(t,e,i){var n,o=Vt(t),s=!v.scrollboxSize()&&"absolute"===o.position,r=(s||i)&&"border-box"===C.css(t,"boxSizing",!1,o),a=i?le(t,l,i,r,o):0;return r&&s&&(a-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-le(t,l,"border",!1,o)-.5)),a&&(n=et.exec(e))&&"px"!==(n[3]||"px")&&(t.style[l]=e,e=C.css(t,l)),ae(0,e,a)}}}),C.cssHooks.marginLeft=Jt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Yt(t,"marginLeft"))||t.getBoundingClientRect().left-Mt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(o,s){C.cssHooks[o+s]={expand:function(t){for(var e=0,i={},n="string"==typeof t?t.split(" "):[t];e<4;e++)i[o+it[e]+s]=n[e]||n[e-2]||n[0];return i}},"margin"!==o&&(C.cssHooks[o+s].set=ae)}),C.fn.extend({css:function(t,e){return W(this,function(t,e,i){var n,o,s={},r=0;if(Array.isArray(e)){for(n=Vt(t),o=e.length;r<o;r++)s[e[r]]=C.css(t,e[r],!1,n);return s}return void 0!==i?C.style(t,e,i):C.css(t,e)},t,e,1<arguments.length)}}),(C.Tween=he).prototype={constructor:he,init:function(t,e,i,n,o,s){this.elem=t,this.prop=i,this.easing=o||C.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(C.cssNumber[i]?"":"px")},cur:function(){var t=he.propHooks[this.prop];return t&&t.get?t.get(this):he.propHooks._default.get(this)},run:function(t){var e,i=he.propHooks[this.prop];return this.options.duration?this.pos=e=C.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):he.propHooks._default.set(this),this}},he.prototype.init.prototype=he.prototype,he.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=C.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){C.fx.step[t.prop]?C.fx.step[t.prop](t):1!==t.elem.nodeType||!C.cssHooks[t.prop]&&null==t.elem.style[ie(t.prop)]?t.elem[t.prop]=t.now:C.style(t.elem,t.prop,t.now+t.unit)}}},he.propHooks.scrollTop=he.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},C.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},C.fx=he.prototype.init,C.fx.step={};var ue,pe,de,fe,me=/^(?:toggle|show|hide)$/,ge=/queueHooks$/;function _e(){pe&&(!1===T.hidden&&k.requestAnimationFrame?k.requestAnimationFrame(_e):k.setTimeout(_e,C.fx.interval),C.fx.tick())}function ve(){return k.setTimeout(function(){ue=void 0}),ue=Date.now()}function ye(t,e){var i,n=0,o={height:t};for(e=e?1:0;n<4;n+=2-e)o["margin"+(i=it[n])]=o["padding"+i]=t;return e&&(o.opacity=o.width=t),o}function be(t,e,i){for(var n,o=(xe.tweeners[e]||[]).concat(xe.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,e,t))return n}function xe(s,t,e){var i,r,n=0,o=xe.prefilters.length,a=C.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=ue||ve(),e=Math.max(0,c.startTime+c.duration-t),i=1-(e/c.duration||0),n=0,o=c.tweens.length;n<o;n++)c.tweens[n].run(i);return a.notifyWith(s,[c,i,e]),i<1&&o?e:(o||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},e),originalProperties:t,originalOptions:e,startTime:ue||ve(),duration:e.duration,tweens:[],createTween:function(t,e){var i=C.Tween(s,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var e=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;e<i;e++)c.tweens[e].run(1);return t?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,t])):a.rejectWith(s,[c,t]),this}}),h=c.props;for(!function(t,e){var i,n,o,s,r;for(i in t)if(o=e[n=z(i)],s=t[i],Array.isArray(s)&&(o=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),(r=C.cssHooks[n])&&"expand"in r)for(i in s=r.expand(s),delete t[n],s)i in t||(t[i]=s[i],e[i]=o);else e[n]=o}(h,c.opts.specialEasing);n<o;n++)if(i=xe.prefilters[n].call(c,s,h,c.opts))return y(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(h,be,c),y(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(xe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return at(i.elem,t,et.exec(e),i),i}]},tweener:function(t,e){for(var i,n=0,o=(t=y(t)?(e=t,["*"]):t.match(q)).length;n<o;n++)i=t[n],xe.tweeners[i]=xe.tweeners[i]||[],xe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,o,s,r,a,l,c,h,u="width"in e||"height"in e,p=this,d={},f=t.style,m=t.nodeType&&rt(t),g=Q.get(t,"fxshow");for(n in i.queue||(null==(r=C._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,p.always(function(){p.always(function(){r.unqueued--,C.queue(t,"fx").length||r.empty.fire()})})),e)if(o=e[n],me.test(o)){if(delete e[n],s=s||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;m=!0}d[n]=g&&g[n]||C.style(t,n)}if((l=!C.isEmptyObject(e))||!C.isEmptyObject(d))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=Q.get(t,"display")),"none"===(h=C.css(t,"display"))&&(c?h=c:(ct([t],!0),c=t.style.display||c,h=C.css(t,"display"),ct([t]))),("inline"===h||"inline-block"===h&&null!=c)&&"none"===C.css(t,"float")&&(l||(p.done(function(){f.display=c}),null==c&&(h=f.display,c="none"===h?"":h)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,d)l||(g?"hidden"in g&&(m=g.hidden):g=Q.access(t,"fxshow",{display:c}),s&&(g.hidden=!m),m&&ct([t],!0),p.done(function(){for(n in m||ct([t]),Q.remove(t,"fxshow"),d)C.style(t,n,d[n])})),l=be(m?g[n]:0,n,p),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?xe.prefilters.unshift(t):xe.prefilters.push(t)}}),C.speed=function(t,e,i){var n=t&&"object"==typeof t?C.extend({},t):{complete:i||!i&&e||y(t)&&t,duration:t,easing:i&&e||e&&!y(e)&&e};return C.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in C.fx.speeds?n.duration=C.fx.speeds[n.duration]:n.duration=C.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){y(n.old)&&n.old.call(this),n.queue&&C.dequeue(this,n.queue)},n},C.fn.extend({fadeTo:function(t,e,i,n){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(e,t,i,n){function o(){var t=xe(this,C.extend({},e),r);(s||Q.get(this,"finish"))&&t.stop(!0)}var s=C.isEmptyObject(e),r=C.speed(t,i,n);return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(o,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof o&&(s=t,t=o,o=void 0),t&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",i=C.timers,n=Q.get(this);if(e)n[e]&&n[e].stop&&r(n[e]);else for(e in n)n[e]&&n[e].stop&&ge.test(e)&&r(n[e]);for(e=i.length;e--;)i[e].elem!==this||null!=o&&i[e].queue!==o||(i[e].anim.stop(s),t=!1,i.splice(e,1));!t&&s||C.dequeue(this,o)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=Q.get(this),i=e[r+"queue"],n=e[r+"queueHooks"],o=C.timers,s=i?i.length:0;for(e.finish=!0,C.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===r&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),C.each(["toggle","show","hide"],function(t,n){var o=C.fn[n];C.fn[n]=function(t,e,i){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(ye(n,!0),t,e,i)}}),C.each({slideDown:ye("show"),slideUp:ye("hide"),slideToggle:ye("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){C.fn[t]=function(t,e,i){return this.animate(n,t,e,i)}}),C.timers=[],C.fx.tick=function(){var t,e=0,i=C.timers;for(ue=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||C.fx.stop(),ue=void 0},C.fx.timer=function(t){C.timers.push(t),C.fx.start()},C.fx.interval=13,C.fx.start=function(){pe||(pe=!0,_e())},C.fx.stop=function(){pe=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(n,t){return n=C.fx&&C.fx.speeds[n]||n,t=t||"fx",this.queue(t,function(t,e){var i=k.setTimeout(t,n);e.stop=function(){k.clearTimeout(i)}})},de=T.createElement("input"),fe=T.createElement("select").appendChild(T.createElement("option")),de.type="checkbox",v.checkOn=""!==de.value,v.optSelected=fe.selected,(de=T.createElement("input")).value="t",de.type="radio",v.radioValue="t"===de.value;var we,ke=C.expr.attrHandle;C.fn.extend({attr:function(t,e){return W(this,C.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){C.removeAttr(this,t)})}}),C.extend({attr:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?C.prop(t,e,i):(1===s&&C.isXMLDoc(t)||(o=C.attrHooks[e.toLowerCase()]||(C.expr.match.bool.test(e)?we:void 0)),void 0!==i?null===i?void C.removeAttr(t,e):o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:(t.setAttribute(e,i+""),i):!(o&&"get"in o&&null!==(n=o.get(t,e)))&&null==(n=C.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&S(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,o=e&&e.match(q);if(o&&1===t.nodeType)for(;i=o[n++];)t.removeAttribute(i)}}),we={set:function(t,e,i){return!1===e?C.removeAttr(t,i):t.setAttribute(i,i),i}},C.each(C.expr.match.bool.source.match(/\w+/g),function(t,e){var r=ke[e]||C.find.attr;ke[e]=function(t,e,i){var n,o,s=e.toLowerCase();return i||(o=ke[s],ke[s]=n,n=null!=r(t,e,i)?s:null,ke[s]=o),n}});var Te=/^(?:input|select|textarea|button)$/i,Ce=/^(?:a|area)$/i;function $e(t){return(t.match(q)||[]).join(" ")}function Se(t){return t.getAttribute&&t.getAttribute("class")||""}function Ee(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(q)||[]}C.fn.extend({prop:function(t,e){return W(this,C.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[C.propFix[t]||t]})}}),C.extend({prop:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&C.isXMLDoc(t)||(e=C.propFix[e]||e,o=C.propHooks[e]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:t[e]=i:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=C.find.attr(t,"tabindex");return e?parseInt(e,10):Te.test(t.nodeName)||Ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(C.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(e){var t,i,n,o,s,r,a,l=0;if(y(e))return this.each(function(t){C(this).addClass(e.call(this,t,Se(this)))});if((t=Ee(e)).length)for(;i=this[l++];)if(o=Se(i),n=1===i.nodeType&&" "+$e(o)+" "){for(r=0;s=t[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o!==(a=$e(n))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,o,s,r,a,l=0;if(y(e))return this.each(function(t){C(this).removeClass(e.call(this,t,Se(this)))});if(!arguments.length)return this.attr("class","");if((t=Ee(e)).length)for(;i=this[l++];)if(o=Se(i),n=1===i.nodeType&&" "+$e(o)+" "){for(r=0;s=t[r++];)for(;-1<n.indexOf(" "+s+" ");)n=n.replace(" "+s+" "," ");o!==(a=$e(n))&&i.setAttribute("class",a)}return this},toggleClass:function(o,e){var s=typeof o,r="string"==s||Array.isArray(o);return"boolean"==typeof e&&r?e?this.addClass(o):this.removeClass(o):y(o)?this.each(function(t){C(this).toggleClass(o.call(this,t,Se(this),e),e)}):this.each(function(){var t,e,i,n;if(r)for(e=0,i=C(this),n=Ee(o);t=n[e++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==o&&"boolean"!=s||((t=Se(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",!t&&!1!==o&&Q.get(this,"__className__")||""))})},hasClass:function(t){for(var e,i=0,n=" "+t+" ";e=this[i++];)if(1===e.nodeType&&-1<(" "+$e(Se(e))+" ").indexOf(n))return!0;return!1}});var De=/\r/g;C.fn.extend({val:function(i){var n,t,o,e=this[0];return arguments.length?(o=y(i),this.each(function(t){var e;1===this.nodeType&&(null==(e=o?i.call(this,t,C(this).val()):i)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=C.map(e,function(t){return null==t?"":t+""})),(n=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):e?(n=C.valHooks[e.type]||C.valHooks[e.nodeName.toLowerCase()])&&"get"in n&&void 0!==(t=n.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(De,""):null==t?"":t:void 0}}),C.extend({valHooks:{option:{get:function(t){var e=C.find.attr(t,"value");return null!=e?e:$e(C.text(t))}},select:{get:function(t){for(var e,i,n=t.options,o=t.selectedIndex,s="select-one"===t.type,r=s?null:[],a=s?o+1:n.length,l=o<0?a:s?o:0;l<a;l++)if(((i=n[l]).selected||l===o)&&!i.disabled&&(!i.parentNode.disabled||!S(i.parentNode,"optgroup"))){if(e=C(i).val(),s)return e;r.push(e)}return r},set:function(t,e){for(var i,n,o=t.options,s=C.makeArray(e),r=o.length;r--;)((n=o[r]).selected=-1<C.inArray(C.valHooks.option.get(n),s))&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<C.inArray(C(t).val(),e)}},v.checkOn||(C.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in k;function Ne(t){t.stopPropagation()}var Ae=/^(?:focusinfocus|focusoutblur)$/;C.extend(C.event,{trigger:function(t,e,i,n){var o,s,r,a,l,c,h,u=[i||T],p=_.call(t,"type")?t.type:t,d=_.call(t,"namespace")?t.namespace.split("."):[],f=h=s=i=i||T;if(3!==i.nodeType&&8!==i.nodeType&&!Ae.test(p+C.event.triggered)&&(-1<p.indexOf(".")&&(p=(d=p.split(".")).shift(),d.sort()),a=p.indexOf(":")<0&&"on"+p,(t=t[C.expando]?t:new C.Event(p,"object"==typeof t&&t)).isTrigger=n?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:C.makeArray(e,[t]),c=C.event.special[p]||{},n||!c.trigger||!1!==c.trigger.apply(i,e))){if(!n&&!c.noBubble&&!m(i)){for(r=c.delegateType||p,Ae.test(r+p)||(f=f.parentNode);f;f=f.parentNode)u.push(f),s=f;s===(i.ownerDocument||T)&&u.push(s.defaultView||s.parentWindow||k)}for(o=0;(f=u[o++])&&!t.isPropagationStopped();)h=f,t.type=1<o?r:c.bindType||p,(l=(Q.get(f,"events")||Object.create(null))[t.type]&&Q.get(f,"handle"))&&l.apply(f,e),(l=a&&f[a])&&l.apply&&V(f)&&(t.result=l.apply(f,e),!1===t.result&&t.preventDefault());return t.type=p,n||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(u.pop(),e)||!V(i)||a&&y(i[p])&&!m(i)&&((s=i[a])&&(i[a]=null),C.event.triggered=p,t.isPropagationStopped()&&h.addEventListener(p,Ne),i[p](),t.isPropagationStopped()&&h.removeEventListener(p,Ne),C.event.triggered=void 0,s&&(i[a]=s)),t.result}},simulate:function(t,e,i){var n=C.extend(new C.Event,i,{type:t,isSimulated:!0});C.event.trigger(n,null,e)}}),C.fn.extend({trigger:function(t,e){return this.each(function(){C.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return C.event.trigger(t,e,i,!0)}}),v.focusin||C.each({focus:"focusin",blur:"focusout"},function(i,n){function o(t){C.event.simulate(n,t.target,C.event.fix(t))}C.event.special[n]={setup:function(){var t=this.ownerDocument||this.document||this,e=Q.access(t,n);e||t.addEventListener(i,o,!0),Q.access(t,n,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this.document||this,e=Q.access(t,n)-1;e?Q.access(t,n,e):(t.removeEventListener(i,o,!0),Q.remove(t,n))}}});var je=k.location,Fe={guid:Date.now()},Le=/\?/;C.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new k.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+t),e};var qe=/\[\]$/,Pe=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,He=/^(?:input|select|textarea|keygen)/i;C.param=function(t,e){function i(t,e){var i=y(e)?e():e;o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)}var n,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!C.isPlainObject(t))C.each(t,function(){i(this.name,this.value)});else for(n in t)!function i(n,t,o,s){var e;if(Array.isArray(t))C.each(t,function(t,e){o||qe.test(n)?s(n,e):i(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,o,s)});else if(o||"object"!==x(t))s(n,t);else for(e in t)i(n+"["+e+"]",t[e],o,s)}(n,t[n],e,i);return o.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=C.prop(this,"elements");return t?C.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!C(this).is(":disabled")&&He.test(this.nodeName)&&!Me.test(t)&&(this.checked||!pt.test(t))}).map(function(t,e){var i=C(this).val();return null==i?null:Array.isArray(i)?C.map(i,function(t){return{name:e.name,value:t.replace(Pe,"\r\n")}}):{name:e.name,value:i.replace(Pe,"\r\n")}}).get()}});var Oe=/%20/g,Ie=/#.*$/,Re=/([?&])_=[^&]*/,We=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,Ue=/^\/\//,Xe={},ze={},Ve="*/".concat("*"),Ge=T.createElement("a");function Qe(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,n=0,o=t.toLowerCase().match(q)||[];if(y(e))for(;i=o[n++];)"+"===i[0]?(i=i.slice(1)||"*",(s[i]=s[i]||[]).unshift(e)):(s[i]=s[i]||[]).push(e)}}function Ke(e,o,s,r){var a={},l=e===ze;function c(t){var n;return a[t]=!0,C.each(e[t]||[],function(t,e){var i=e(o,s,r);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(o.dataTypes.unshift(i),c(i),!1)}),n}return c(o.dataTypes[0])||!a["*"]&&c("*")}function Ye(t,e){var i,n,o=C.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n=n||{})[i]=e[i]);return n&&C.extend(!0,t,n),t}Ge.href=je.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:je.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(je.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ve,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ye(Ye(t,C.ajaxSettings),e):Ye(C.ajaxSettings,t)},ajaxPrefilter:Qe(Xe),ajaxTransport:Qe(ze),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var h,u,p,i,d,n,f,m,o,s,g=C.ajaxSetup({},e),_=g.context||g,v=g.context&&(_.nodeType||_.jquery)?C(_):C.event,y=C.Deferred(),b=C.Callbacks("once memory"),x=g.statusCode||{},r={},a={},l="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(f){if(!i)for(i={};e=We.exec(p);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return f?p:null},setRequestHeader:function(t,e){return null==f&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,r[t]=e),this},overrideMimeType:function(t){return null==f&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)w.always(t[w.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||l;return h&&h.abort(e),c(0,e),this}};if(y.promise(w),g.url=((t||g.url||je.href)+"").replace(Ue,je.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(q)||[""],null==g.crossDomain){n=T.createElement("a");try{n.href=g.url,n.href=n.href,g.crossDomain=Ge.protocol+"//"+Ge.host!=n.protocol+"//"+n.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=C.param(g.data,g.traditional)),Ke(Xe,g,e,w),f)return w;for(o in(m=C.event&&g.global)&&0==C.active++&&C.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Be.test(g.type),u=g.url.replace(Ie,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Oe,"+")):(s=g.url.slice(u.length),g.data&&(g.processData||"string"==typeof g.data)&&(u+=(Le.test(u)?"&":"?")+g.data,delete g.data),!1===g.cache&&(u=u.replace(Re,"$1"),s=(Le.test(u)?"&":"?")+"_="+Fe.guid+++s),g.url=u+s),g.ifModified&&(C.lastModified[u]&&w.setRequestHeader("If-Modified-Since",C.lastModified[u]),C.etag[u]&&w.setRequestHeader("If-None-Match",C.etag[u])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&w.setRequestHeader("Content-Type",g.contentType),w.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Ve+"; q=0.01":""):g.accepts["*"]),g.headers)w.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(_,w,g)||f))return w.abort();if(l="abort",b.add(g.complete),w.done(g.success),w.fail(g.error),h=Ke(ze,g,e,w)){if(w.readyState=1,m&&v.trigger("ajaxSend",[w,g]),f)return w;g.async&&0<g.timeout&&(d=k.setTimeout(function(){w.abort("timeout")},g.timeout));try{f=!1,h.send(r,c)}catch(t){if(f)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,i,n){var o,s,r,a,l,c=e;f||(f=!0,d&&k.clearTimeout(d),h=void 0,p=n||"",w.readyState=0<t?4:0,o=200<=t&&t<300||304===t,i&&(a=function(t,e,i){for(var n,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r=r||o}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(g,w,i)),!o&&-1<C.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),a=function(t,e,i,n){var o,s,r,a,l,c={},h=t.dataTypes.slice();if(h[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=h.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=h.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],h.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(g,a,w,o),o?(g.ifModified&&((l=w.getResponseHeader("Last-Modified"))&&(C.lastModified[u]=l),(l=w.getResponseHeader("etag"))&&(C.etag[u]=l)),204===t||"HEAD"===g.type?c="nocontent":304===t?c="notmodified":(c=a.state,s=a.data,o=!(r=a.error))):(r=c,!t&&c||(c="error",t<0&&(t=0))),w.status=t,w.statusText=(e||c)+"",o?y.resolveWith(_,[s,c,w]):y.rejectWith(_,[w,c,r]),w.statusCode(x),x=void 0,m&&v.trigger(o?"ajaxSuccess":"ajaxError",[w,g,o?s:r]),b.fireWith(_,[w,c]),m&&(v.trigger("ajaxComplete",[w,g]),--C.active||C.event.trigger("ajaxStop")))}return w},getJSON:function(t,e,i){return C.get(t,e,i,"json")},getScript:function(t,e){return C.get(t,void 0,e,"script")}}),C.each(["get","post"],function(t,o){C[o]=function(t,e,i,n){return y(e)&&(n=n||i,i=e,e=void 0),C.ajax(C.extend({url:t,type:o,dataType:n,data:e,success:i},C.isPlainObject(t)&&t))}}),C.ajaxPrefilter(function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),C._evalUrl=function(t,e,i){return C.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){C.globalEval(t,e,i)}})},C.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=C(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return y(i)?this.each(function(t){C(this).wrapInner(i.call(this,t))}):this.each(function(){var t=C(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=y(e);return this.each(function(t){C(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(t){return!C.expr.pseudos.visible(t)},C.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new k.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Ze=C.ajaxSettings.xhr();v.cors=!!Ze&&"withCredentials"in Ze,v.ajax=Ze=!!Ze,C.ajaxTransport(function(o){var s,r;if(v.cors||Ze&&!o.crossDomain)return{send:function(t,e){var i,n=o.xhr();if(n.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(i in o.xhrFields)n[i]=o.xhrFields[i];for(i in o.mimeType&&n.overrideMimeType&&n.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)n.setRequestHeader(i,t[i]);s=function(t){return function(){s&&(s=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===t?n.abort():"error"===t?"number"!=typeof n.status?e(0,"error"):e(n.status,n.statusText):e(Je[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=s(),r=n.onerror=n.ontimeout=s("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&k.setTimeout(function(){s&&r()})},s=s("abort");try{n.send(o.hasContent&&o.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),C.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return C.globalEval(t),t}}}),C.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),C.ajaxTransport("script",function(i){var n,o;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){n=C("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",o=function(t){n.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(n[0])},abort:function(){o&&o()}}});var ti,ei=[],ii=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ei.pop()||C.expando+"_"+Fe.guid++;return this[t]=!0,t}}),C.ajaxPrefilter("json jsonp",function(t,e,i){var n,o,s,r=!1!==t.jsonp&&(ii.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ii.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return n=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(ii,"$1"+n):!1!==t.jsonp&&(t.url+=(Le.test(t.url)?"&":"?")+t.jsonp+"="+n),t.converters["script json"]=function(){return s||C.error(n+" was not called"),s[0]},t.dataTypes[0]="json",o=k[n],k[n]=function(){s=arguments},i.always(function(){void 0===o?C(k).removeProp(n):k[n]=o,t[n]&&(t.jsonpCallback=e.jsonpCallback,ei.push(n)),s&&y(o)&&o(s[0]),s=o=void 0}),"script"}),v.createHTMLDocument=((ti=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),C.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(v.createHTMLDocument?((n=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(n)):e=T),s=!i&&[],(o=E.exec(t))?[e.createElement(o[1])]:(o=yt([t],e,s),s&&s.length&&C(s).remove(),C.merge([],o.childNodes)));var n,o,s},C.fn.load=function(t,e,i){var n,o,s,r=this,a=t.indexOf(" ");return-1<a&&(n=$e(t.slice(a)),t=t.slice(0,a)),y(e)?(i=e,e=void 0):e&&"object"==typeof e&&(o="POST"),0<r.length&&C.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(n?C("<div>").append(C.parseHTML(t)).find(n):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,function(t){return e===t.elem}).length},C.offset={setOffset:function(t,e,i){var n,o,s,r,a,l,c=C.css(t,"position"),h=C(t),u={};"static"===c&&(t.style.position="relative"),a=h.offset(),s=C.css(t,"top"),l=C.css(t,"left"),o=("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(r=(n=h.position()).top,n.left):(r=parseFloat(s)||0,parseFloat(l)||0),y(e)&&(e=e.call(t,i,C.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+o),"using"in e?e.using.call(t,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),h.css(u))}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){C.offset.setOffset(this,e,t)});var t,i,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],o={top:0,left:0};if("fixed"===C.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===C.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((o=C(t).offset()).top+=C.css(t,"borderTopWidth",!0),o.left+=C.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-C.css(n,"marginTop",!0),left:e.left-o.left-C.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===C.css(t,"position");)t=t.offsetParent;return t||nt})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var s="pageYOffset"===o;C.fn[e]=function(t){return W(this,function(t,e,i){var n;return m(t)?n=t:9===t.nodeType&&(n=t.defaultView),void 0===i?n?n[o]:t[e]:void(n?n.scrollTo(s?n.pageXOffset:i,s?i:n.pageYOffset):t[e]=i)},e,t,arguments.length)}}),C.each(["top","left"],function(t,i){C.cssHooks[i]=Jt(v.pixelPosition,function(t,e){if(e)return e=Yt(t,i),zt.test(e)?C(t).position()[i]+"px":e})}),C.each({Height:"height",Width:"width"},function(r,a){C.each({padding:"inner"+r,content:a,"":"outer"+r},function(n,s){C.fn[s]=function(t,e){var i=arguments.length&&(n||"boolean"!=typeof t),o=n||(!0===t||!0===e?"margin":"border");return W(this,function(t,e,i){var n;return m(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(n=t.documentElement,Math.max(t.body["scroll"+r],n["scroll"+r],t.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?C.css(t,e,o):C.style(t,e,i,o)},a,i?t:void 0,i)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){C.fn[e]=function(t){return this.on(e,t)}}),C.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){C.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}});var ni=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(t,e){var i,n,o;if("string"==typeof e&&(i=t[e],e=t,t=i),y(t))return n=a.call(arguments,2),(o=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||C.guid++,o},C.holdReady=function(t){t?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=S,C.isFunction=y,C.isWindow=m,C.camelCase=z,C.type=x,C.now=Date.now,C.isNumeric=function(t){var e=C.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},C.trim=function(t){return null==t?"":(t+"").replace(ni,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var oi=k.jQuery,si=k.$;return C.noConflict=function(t){return k.$===C&&(k.$=si),t&&k.jQuery===C&&(k.jQuery=oi),C},void 0===t&&(k.jQuery=k.$=C),C}),function(e){"undefined"!=typeof jQuery&&jQuery||"function"!=typeof define||!define.amd?"undefined"!=typeof jQuery&&jQuery||"object"!=typeof exports?e(jQuery,document,window,navigator):e(require("jquery"),document,window,navigator):define(["jquery"],function(t){return e(t,document,window,navigator)})}(function(l,c,h,t,u){"use strict";var e,i,n=0,o=(i=/msie\s\d+/i,0<(e=t.userAgent).search(i)&&i.exec(e).toString().split(" ")[1]<9&&(l("html").addClass("lt-ie9"),!0));function s(t,e,i){this.VERSION="2.3.1",this.input=t,this.plugin_count=i,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,e=e||{},this.$cache={win:l(h),body:l(c.body),input:l(t),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var n,o,s=this.$cache.input,r=s.prop("value"),a={skin:"flat",type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" â ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null};for(o in"INPUT"!==s[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",s[0]),(n={skin:s.data("skin"),type:s.data("type"),min:s.data("min"),max:s.data("max"),from:s.data("from"),to:s.data("to"),step:s.data("step"),min_interval:s.data("minInterval"),max_interval:s.data("maxInterval"),drag_interval:s.data("dragInterval"),values:s.data("values"),from_fixed:s.data("fromFixed"),from_min:s.data("fromMin"),from_max:s.data("fromMax"),from_shadow:s.data("fromShadow"),to_fixed:s.data("toFixed"),to_min:s.data("toMin"),to_max:s.data("toMax"),to_shadow:s.data("toShadow"),prettify_enabled:s.data("prettifyEnabled"),prettify_separator:s.data("prettifySeparator"),force_edges:s.data("forceEdges"),keyboard:s.data("keyboard"),grid:s.data("grid"),grid_margin:s.data("gridMargin"),grid_num:s.data("gridNum"),grid_snap:s.data("gridSnap"),hide_min_max:s.data("hideMinMax"),hide_from_to:s.data("hideFromTo"),prefix:s.data("prefix"),postfix:s.data("postfix"),max_postfix:s.data("maxPostfix"),decorate_both:s.data("decorateBoth"),values_separator:s.data("valuesSeparator"),input_values_separator:s.data("inputValuesSeparator"),disable:s.data("disable"),block:s.data("block"),extra_classes:s.data("extraClasses")}).values=n.values&&n.values.split(","),n)n.hasOwnProperty(o)&&(n[o]!==u&&""!==n[o]||delete n[o]);r!==u&&""!==r&&((r=r.split(n.input_values_separator||e.input_values_separator||";"))[0]&&r[0]==+r[0]&&(r[0]=+r[0]),r[1]&&r[1]==+r[1]&&(r[1]=+r[1]),e&&e.values&&e.values.length?(a.from=r[0]&&e.values.indexOf(r[0]),a.to=r[1]&&e.values.indexOf(r[1])):(a.from=r[0]&&+r[0],a.to=r[1]&&+r[1])),l.extend(a,e),l.extend(a,n),this.options=a,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()}Function.prototype.bind||(Function.prototype.bind=function(n){var o=this,s=[].slice;if("function"!=typeof o)throw new TypeError;var r=s.call(arguments,1),a=function(){if(this instanceof a){var t=function(){};t.prototype=o.prototype;var e=new t,i=o.apply(e,r.concat(s.call(arguments)));return Object(i)===i?i:e}return o.apply(n,r.concat(s.call(arguments)))};return a}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),o=n.length>>>0;if(0==o)return-1;var s=+e||0;if(Math.abs(s)===1/0&&(s=0),o<=s)return-1;for(i=Math.max(0<=s?s:o-Math.abs(s),0);i<o;){if(i in n&&n[i]===t)return i;i++}return-1}),s.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs irs--'+this.options.skin+" js-irs-"+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,n=this.options.to;t<i&&n===e?this.$cache.s_from.addClass("type_last"):n<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),o&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),o&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){var e,i;this.target||(e=(i="single"===this.options.type?this.$cache.single:this.$cache.from).offset().left,e+=i.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:e}))},pointerMove:function(t){var e;this.dragging&&(e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX,this.coords.x_pointer=e-this.coords.x_gap,this.calc())},pointerUp:function(t){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,o&&l("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(l.contains(this.$cache.cont[0],t.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&("both"===t&&this.setTempMinInterval(),t=t||this.target||"from",this.current_plugin=this.plugin_count,this.target=t,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=i-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(t),o&&l("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100,i=this.options.step/i;t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");var t,e;this.options.values.length?(this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]))):(t=this._prettify(this.options.min),e=this._prettify(this.options.max),this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))),this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,10!==this.calc_count&&!t||(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,n=(this.result.from-this.options.min)/i,o=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(n),this.coords.p_from_real=this.toFixed(n),this.coords.p_to_real=this.toFixed(o),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var s=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent-r,l=a/2,c=s-l,h=s+l;c<0&&(h=(c=0)+a),100<h&&(c=(h=100)-a),this.coords.p_from_real=this.calcWithStep(c),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(h),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:t<e&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2<=t?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),this.coords.w_rs===this.coords.w_rs_old&&!this.force_redraw||(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.bar[0].style.left=0,this.$cache.bar[0].style.width=this.coords.p_bar_w+this.coords.p_bar_x+"%",this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",this.old_from===this.result.from&&!this.force_redraw||(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),this.old_to===this.result.to&&!this.force_redraw||(this.$cache.to[0].style.left=this.labels.p_to_left+"%")),this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){var t,e,i,n,o,s,r,a,l,c,h;this.options&&(s=this.options.values.length,r=this.options.p_values,this.options.hide_from_to||("single"===this.options.type?(t=s?this.decorate(r[this.result.from]):(n=this._prettify(this.result.from),this.decorate(n,this.result.from)),this.$cache.single.html(t),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"):(i=s?(this.options.decorate_both?(t=this.decorate(r[this.result.from]),t+=this.options.values_separator,t+=this.decorate(r[this.result.to])):t=this.decorate(r[this.result.from]+this.options.values_separator+r[this.result.to]),e=this.decorate(r[this.result.from]),this.decorate(r[this.result.to])):(n=this._prettify(this.result.from),o=this._prettify(this.result.to),this.options.decorate_both?(t=this.decorate(n,this.result.from),t+=this.options.values_separator,t+=this.decorate(o,this.result.to)):t=this.decorate(n+this.options.values_separator+o,this.result.to),e=this.decorate(n,this.result.from),this.decorate(o,this.result.to)),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i),this.calcLabels(),a=Math.min(this.labels.p_single_left,this.labels.p_from_left),l=this.labels.p_single_left+this.labels.p_single_fake,c=this.labels.p_to_left+this.labels.p_to_fake,h=Math.max(l,c),this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",h=this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",Math.max(l,c))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),a<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",h>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible")))},drawShadow:function(){var t,e,i,n,o=this.options,s=this.$cache,r="number"==typeof o.from_min&&!isNaN(o.from_min),a="number"==typeof o.from_max&&!isNaN(o.from_max),l="number"==typeof o.to_min&&!isNaN(o.to_min),c="number"==typeof o.to_max&&!isNaN(o.to_max);"single"===o.type?o.from_shadow&&(r||a)?(t=this.convertToPercent(r?o.from_min:o.min),e=this.convertToPercent(a?o.from_max:o.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_single[0].style.display="block",s.shad_single[0].style.left=t+"%",s.shad_single[0].style.width=e+"%"):s.shad_single[0].style.display="none":(o.from_shadow&&(r||a)?(t=this.convertToPercent(r?o.from_min:o.min),e=this.convertToPercent(a?o.from_max:o.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_from[0].style.display="block",s.shad_from[0].style.left=t+"%",s.shad_from[0].style.width=e+"%"):s.shad_from[0].style.display="none",o.to_shadow&&(l||c)?(i=this.convertToPercent(l?o.to_min:o.min),n=this.convertToPercent(c?o.to_max:o.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),n=this.toFixed(n-this.coords.p_handle/100*n),i+=this.coords.p_handle/2,s.shad_to[0].style.display="block",s.shad_to[0].style.left=i+"%",s.shad_to[0].style.width=n+"%"):s.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i,n=this.options.max-this.options.min,o=n/100;return n?(i=(e?t:t-this.options.min)/o,this.toFixed(i)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,n=this.options.min,o=this.options.max,s=n.toString().split(".")[1],r=o.toString().split(".")[1],a=0,l=0;if(0===t)return this.options.min;if(100===t)return this.options.max;s&&(a=e=s.length),r&&(a=i=r.length),e&&i&&(a=i<=e?e:i),n<0&&(n=+(n+(l=Math.abs(n))).toFixed(a),o=+(o+l).toFixed(a));var c,h=(o-n)/100*t+n,u=this.options.step.toString().split(".")[1],h=u?+h.toFixed(u.length):(h/=this.options.step,+(h*=this.options.step).toFixed(0));return l&&(h-=l),(c=u?+h.toFixed(u.length):this.toFixed(h))<this.options.min?c=this.options.min:c>this.options.max&&(c=this.options.max),c},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return 100<e&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var n,o,s=this.options;return s.min_interval?(n=this.convertToValue(t),o=this.convertToValue(e),"from"===i?o-n<s.min_interval&&(n=o-s.min_interval):n-o<s.min_interval&&(n=o+s.min_interval),this.convertToPercent(n)):t},checkMaxInterval:function(t,e,i){var n,o,s=this.options;return s.max_interval?(n=this.convertToValue(t),o=this.convertToValue(e),"from"===i?o-n>s.max_interval&&(n=o-s.max_interval):n-o>s.max_interval&&(n=o+s.max_interval),this.convertToPercent(n)):t},checkDiapason:function(t,e,i){var n=this.convertToValue(t),o=this.options;return"number"!=typeof e&&(e=o.min),"number"!=typeof i&&(i=o.max),n<e&&(n=e),i<n&&(n=i),this.convertToPercent(n)},toFixed:function(t){return+t.toFixed(20)},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges&&(t<0?t=0:100-e<t&&(t=100-e)),this.toFixed(t)},validate:function(){var t,e,i=this.options,n=this.result,o=i.values,s=o.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),s)for(i.p_values=[],i.min=0,i.max=s-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<s;e++)t=+o[e],t=isNaN(t)?o[e]:(o[e]=t,this._prettify(t)),i.p_values.push(t);"number"==typeof i.from&&!isNaN(i.from)||(i.from=i.min),"number"==typeof i.to&&!isNaN(i.to)||(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),n&&(n.min!==i.min&&(n.min=i.min),n.max!==i.max&&(n.max=i.max),(n.from<n.min||n.from>n.max)&&(n.from=i.from),(n.to<n.min||n.to>n.max)&&(n.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",n=this.options;return n.prefix&&(i+=n.prefix),i+=t,n.max_postfix&&(n.values.length&&t===n.p_values[n.max]||e===n.max)&&(i+=n.max_postfix,n.postfix&&(i+=" ")),n.postfix&&(i+=n.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,n,o,s,r=this.options,a=r.max-r.min,l=r.grid_num,c=0,h=4,u="";for(this.calcGridMargin(),r.grid_snap&&(l=a/r.step),50<l&&(l=50),i=this.toFixed(100/l),4<l&&(h=3),7<l&&(h=2),14<l&&(h=1),28<l&&(h=0),t=0;t<l+1;t++){for(n=h,100<(c=this.toFixed(i*t))&&(c=100),o=((this.coords.big[t]=c)-i*(t-1))/(n+1),e=1;e<=n&&0!==c;e++)u+='<span class="irs-grid-pol small" style="left: '+this.toFixed(c-o*e)+'%"></span>';u+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',s=this.convertToValue(c),u+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+(s=r.values.length?r.p_values[s]:this._prettify(s))+"</span>"}this.coords.big_num=Math.ceil(l+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(u),this.cacheGridLabels()}},cacheGridLabels:function(){for(var t,e=this.coords.big_num,i=0;i<e;i++)t=this.$cache.grid.find(".js-grid-text-"+i),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){for(var t,e=[],i=[],n=this.coords.big_num,o=0;o<n;o++)this.coords.big_w[o]=this.$cache.grid_labels[o].outerWidth(!1),this.coords.big_p[o]=this.toFixed(this.coords.big_w[o]/this.coords.w_rs*100),this.coords.big_x[o]=this.toFixed(this.coords.big_p[o]/2),e[o]=this.toFixed(this.coords.big[o]-this.coords.big_x[o]),i[o]=this.toFixed(e[o]+this.coords.big_p[o]);for(this.options.force_edges&&(e[0]<-this.coords.grid_gap&&(e[0]=-this.coords.grid_gap,i[0]=this.toFixed(e[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),i[n-1]>100+this.coords.grid_gap&&(i[n-1]=100+this.coords.grid_gap,e[n-1]=this.toFixed(i[n-1]-this.coords.big_p[n-1]),this.coords.big_x[n-1]=this.toFixed(this.coords.big_p[n-1]-this.coords.grid_gap))),this.calcGridCollision(2,e,i),this.calcGridCollision(4,e,i),o=0;o<n;o++)t=this.$cache.grid_labels[o][0],this.coords.big_x[o]!==Number.POSITIVE_INFINITY&&(t.style.marginLeft=-this.coords.big_x[o]+"%")},calcGridCollision:function(t,e,i){for(var n,o,s=this.coords.big_num,r=0;r<s&&!(s<=(n=r+t/2));r+=t)o=this.$cache.grid_labels[n][0],i[r]<=e[n]?o.style.visibility="visible":o.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(t){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=l.extend(this.options,t),this.validate(),this.updateResult(t),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),l.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},l.fn.ionRangeSlider=function(t){return this.each(function(){l.data(this,"ionRangeSlider")||l.data(this,"ionRangeSlider",new s(this,t,n++))})},function(){for(var s=0,t=["ms","moz","webkit","o"],e=0;e<t.length&&!h.requestAnimationFrame;++e)h.requestAnimationFrame=h[t[e]+"RequestAnimationFrame"],h.cancelAnimationFrame=h[t[e]+"CancelAnimationFrame"]||h[t[e]+"CancelRequestAnimationFrame"];h.requestAnimationFrame||(h.requestAnimationFrame=function(t,e){var i=(new Date).getTime(),n=Math.max(0,16-(i-s)),o=h.setTimeout(function(){t(i+n)},n);return s=i+n,o}),h.cancelAnimationFrame||(h.cancelAnimationFrame=function(t){clearTimeout(t)})}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
